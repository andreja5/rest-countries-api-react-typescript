[{"C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\index.tsx":"1","C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\reportWebVitals.ts":"2","C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\App.tsx":"3","C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\components\\Country\\Country.tsx":"4","C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\components\\Header\\Header.tsx":"5","C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\components\\NotFound\\NotFound.tsx":"6","C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\components\\Countries\\Countries.tsx":"7","C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\components\\Header\\SwitchMode\\SwitchMode.tsx":"8","C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\components\\FilterInputs\\FilterInputs.tsx":"9","C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\services\\CountriesService.ts":"10","C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\components\\FilterInputs\\SearchInput\\SearchInput.tsx":"11","C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\services\\BaseService.ts":"12","C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\services\\ErrorService.ts":"13","C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\services\\Client.ts":"14","C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\components\\FilterInputs\\SelectInput\\SelectInput.tsx":"15","C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\utils\\filterMethods.ts":"16","C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\utils\\filterByExpressions.ts":"17","C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\hooks\\useGetCountries.ts":"18","C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\hooks\\filterReducers.ts":"19","C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\utils\\helperFunctions.ts":"20","C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\AppRouter.tsx":"21","C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\utils\\styleMethods.ts":"22","C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\components\\CountryCards\\CountryCards.tsx":"23","C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\components\\CountryInfo\\CountryInfo.tsx":"24","C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\components\\Loading\\Loading.tsx":"25","C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\components\\ItemsList\\ItemsList.tsx":"26","C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\components\\BorderList\\BorderList.tsx":"27","C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\components\\LinkButton\\LinkButton.tsx":"28"},{"size":290,"mtime":1611068024975,"results":"29","hashOfConfig":"30"},{"size":425,"mtime":499162500000,"results":"31","hashOfConfig":"30"},{"size":145,"mtime":1611699285229,"results":"32","hashOfConfig":"30"},{"size":560,"mtime":1611662779743,"results":"33","hashOfConfig":"30"},{"size":993,"mtime":1611070528906,"results":"34","hashOfConfig":"30"},{"size":208,"mtime":1610633491140,"results":"35","hashOfConfig":"30"},{"size":1880,"mtime":1611662276234,"results":"36","hashOfConfig":"30"},{"size":522,"mtime":1611669151916,"results":"37","hashOfConfig":"30"},{"size":1300,"mtime":1611661291014,"results":"38","hashOfConfig":"30"},{"size":3589,"mtime":1611699261977,"results":"39","hashOfConfig":"30"},{"size":714,"mtime":1611661328916,"results":"40","hashOfConfig":"30"},{"size":200,"mtime":1610730855874,"results":"41","hashOfConfig":"30"},{"size":499,"mtime":1610787110953,"results":"42","hashOfConfig":"30"},{"size":275,"mtime":1611313050909,"results":"43","hashOfConfig":"30"},{"size":679,"mtime":1611661459287,"results":"44","hashOfConfig":"30"},{"size":1910,"mtime":1611672339133,"results":"45","hashOfConfig":"30"},{"size":1044,"mtime":1611655691891,"results":"46","hashOfConfig":"30"},{"size":607,"mtime":1611653308531,"results":"47","hashOfConfig":"30"},{"size":643,"mtime":1611698961540,"results":"48","hashOfConfig":"30"},{"size":1885,"mtime":1611672707406,"results":"49","hashOfConfig":"30"},{"size":1167,"mtime":1611213742824,"results":"50","hashOfConfig":"30"},{"size":318,"mtime":1611698901944,"results":"51","hashOfConfig":"30"},{"size":911,"mtime":1611310516360,"results":"52","hashOfConfig":"30"},{"size":4427,"mtime":1611698310767,"results":"53","hashOfConfig":"30"},{"size":863,"mtime":1611249231985,"results":"54","hashOfConfig":"30"},{"size":1620,"mtime":1611669396817,"results":"55","hashOfConfig":"30"},{"size":814,"mtime":1611321977439,"results":"56","hashOfConfig":"30"},{"size":632,"mtime":1611321787221,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"5df3a6",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"60"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"60"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\index.tsx",[],["121","122"],"C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\reportWebVitals.ts",[],["123","124"],"C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\App.tsx",[],"C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\components\\Country\\Country.tsx",[],"C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\components\\Header\\Header.tsx",["125"],"import React, { FC, useEffect, useState } from 'react';\r\nimport themes from '../../utils/themes.json';\r\nimport { parseTheme } from '../../utils/styleMethods';\r\nimport './Header.scss';\r\nimport SwitchMode from './SwitchMode/SwitchMode';\r\n\r\ninterface HeaderProps {\r\n  label: string;\r\n}\r\n\r\nconst Header: FC<HeaderProps> = ({ label }): JSX.Element => {\r\n  const { darkTheme, lightTheme } = themes;\r\n  const [darkMode, setDarkMode] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (darkMode) {\r\n      parseTheme(darkTheme);\r\n    } else {\r\n      parseTheme(lightTheme);\r\n    }\r\n  }, [darkMode]);\r\n\r\n  return (\r\n    <header className=\"header\">\r\n      <div className='header-container flex flex-jc-sb'>\r\n        <h1>{label}</h1>\r\n        <SwitchMode\r\n            classBlock=\"switch-mode\"\r\n            icon={`${darkMode ? \"fas\" : \"far\"} fa-moon`}\r\n            onToggle={() => setDarkMode(!darkMode)}\r\n            label=\"Dark Mode\"\r\n        />\r\n      </div>\r\n  </header>\r\n  )\r\n}\r\n\r\nexport default Header;","C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\components\\NotFound\\NotFound.tsx",[],"C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\components\\Countries\\Countries.tsx",["126"],"import React, { FC, useEffect, useReducer, useState } from 'react';\r\nimport './Countries.scss';\r\nimport FilterInputs from '../FilterInputs/FilterInputs';\r\nimport { filterReducer } from '../../hooks/filterReducers';\r\nimport { CountryCards } from '../CountryCards/CountryCards';\r\nimport { CountryData } from '../../interfaces/Country';\r\nimport { criteria, searchString } from '../../utils/filterByExpressions';\r\nimport { multiPassFilter } from '../../utils/filterMethods';\r\n\r\ninterface CountriesProps {\r\n  countries: CountryData[];\r\n}\r\n\r\nconst filterDefaults = { search: '', region: '' };\r\n\r\nconst Countries: FC<CountriesProps> = ({ countries }): JSX.Element => {\r\n  const [filter, dispathFilter] = useReducer(filterReducer, filterDefaults);\r\n  const [filteredCountries, setFilteredCountries] = useState([] as CountryData[]);\r\n\r\n  /**\r\n   * Set state with filtered countries by search or by select criteria\r\n   */\r\n  const filterCountries = (): void => {\r\n    const { search, region } = filter as typeof filterDefaults;\r\n\r\n    const filters = [\r\n      [search, searchString('name', search)],\r\n      [region, criteria('region', region)]\r\n    ];\r\n\r\n    const filtered = multiPassFilter(countries, filters);\r\n    \r\n    setFilteredCountries(filtered);\r\n  }\r\n\r\n  /**\r\n   * Returns filtered countries if user use some of filter options or all countries if user didn't use any of filter options\r\n   */\r\n  const deployCoutriesList = (): CountryData[] => {\r\n    const { search, region } = filter as typeof filterDefaults;\r\n\r\n    if (!search && !region) return countries;\r\n\r\n    return filteredCountries;\r\n  }\r\n\r\n  useEffect((): void => {\r\n    filterCountries();\r\n  }, [filter]);\r\n  return (\r\n    <div className='countries'>\r\n      <FilterInputs inputData={[filter, dispathFilter]} />\r\n\r\n      <CountryCards countries={deployCoutriesList()} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Countries;","C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\components\\Header\\SwitchMode\\SwitchMode.tsx",[],"C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\components\\FilterInputs\\FilterInputs.tsx",[],"C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\services\\CountriesService.ts",[],"C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\components\\FilterInputs\\SearchInput\\SearchInput.tsx",[],"C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\services\\BaseService.ts",[],"C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\services\\ErrorService.ts",[],"C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\services\\Client.ts",[],["127","128"],"C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\components\\FilterInputs\\SelectInput\\SelectInput.tsx",[],"C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\utils\\filterMethods.ts",[],"C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\utils\\filterByExpressions.ts",[],"C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\hooks\\useGetCountries.ts",["129"],"import { useEffect, useState } from \"react\";\r\nimport { CountryData } from \"../interfaces/Country\";\r\nimport CountriesService from \"../services/CountriesService\";\r\n\r\n/**\r\n * @description Returns all countries from API\r\n * \r\n * @param fields Country fields that we need to display for user\r\n */\r\nexport const useGetCountries = (fields: string[]): CountryData[] => {\r\n  const [countries, setCountries] = useState([] as CountryData[]);\r\n  const countriesService = new CountriesService();\r\n\r\n  useEffect((): void => {\r\n    countriesService.loadCountries(fields, setCountries);\r\n  }, []);\r\n\r\n  return countries;\r\n}","C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\hooks\\filterReducers.ts",[],"C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\utils\\helperFunctions.ts",[],"C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\AppRouter.tsx",[],"C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\utils\\styleMethods.ts",[],"C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\components\\CountryCards\\CountryCards.tsx",[],"C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\components\\CountryInfo\\CountryInfo.tsx",["130"],"import React, { FC, useEffect, useState } from 'react';\r\nimport './CountryInfo.scss';\r\nimport LinkButton from '../LinkButton/LinkButton';\r\nimport BordersList from '../BorderList/BorderList';\r\nimport ItemsList from '../ItemsList/ItemsList';\r\nimport Loading from '../Loading/Loading';\r\nimport CountriesService from '../../services/CountriesService';\r\nimport { convertToKeyValue } from '../../utils/filterMethods';\r\nimport { getNestedDetails } from '../../utils/helperFunctions';\r\nimport { CountryInfoData } from '../../interfaces/Country';\r\n\r\ninterface CountryInfoProps {\r\n  match: any;\r\n}\r\n\r\nconst countryFields = [\r\n  \"nativeName\",\r\n  \"population\",\r\n  \"region\",\r\n  \"subregion\",\r\n  \"capital\",\r\n  \"topLevelDomain\",\r\n  \"currencies\",\r\n  \"languages\",\r\n  \"borders\",\r\n  \"name\",\r\n  \"flag\",\r\n];\r\n\r\nconst CountryInfo: FC<CountryInfoProps> = ({ match }): JSX.Element => {\r\n  const { id } = match.params;\r\n  const [firstList, setFirstList] = useState([]);\r\n  const [secondList, setSecondList] = useState([]);\r\n  const [borders, setBorders] = useState([] as string[][] | null);\r\n  const [flag, setFlag] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n\r\n  const countriesService = new CountriesService();\r\n\r\n  /**\r\n   * @description Load first list with information about native name, population, region, subregion and capital\r\n   * \r\n   * @param countryData Country data\r\n   */\r\n  const loadFirstList = (countryData: CountryInfoData): void => {\r\n    const firstListDisplay = countryFields.slice(0, 5);\r\n\r\n    const firstListData = convertToKeyValue(countryData, firstListDisplay);\r\n\r\n    setFirstList(firstListData);\r\n  }\r\n\r\n  /**\r\n   * @description Load second list with information about top level domain, currencies and languages\r\n   * \r\n   * @param countryData Country data\r\n   */\r\n  const loadSecondList = (countryData: CountryInfoData): void => {\r\n      const secondListDisplay = countryFields.slice(5, 8);\r\n      const secondListKeys = [0, \"name\", \"name\"];\r\n\r\n      const parsedDetails = getNestedDetails(countryData, secondListDisplay, secondListKeys);\r\n      const secondListData = convertToKeyValue(parsedDetails, secondListDisplay);\r\n\r\n      setSecondList(secondListData);\r\n  }\r\n\r\n  /**\r\n   * @description Load borders data\r\n   * \r\n   * @param bordersData Borders data\r\n   */\r\n  const loadBordersData = (bordersData: string[]): undefined => {\r\n      if (bordersData.length === 0) {\r\n          setBorders(null);\r\n          return;\r\n      }\r\n\r\n      const convertedData = countriesService.convertCountryCode(bordersData, \"name\");\r\n\r\n      convertedData.then((borders: string[][] | undefined) => {\r\n          if (borders?.length) {\r\n              setBorders(borders);\r\n          }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @description Country data handler\r\n   * \r\n   * @param countryData Country info data\r\n   */\r\n  const countryDataHandler = (countryData: CountryInfoData): void => {\r\n      const { name, flag, borders } = countryData;\r\n\r\n      loadFirstList(countryData);\r\n      loadSecondList(countryData);\r\n      loadBordersData(borders);\r\n      setFlag(flag);\r\n      setName(name);\r\n  }\r\n\r\n  /**\r\n   * @description Reset all states\r\n   */\r\n  const resetStates = (): void => {\r\n      setFirstList([]);\r\n      setSecondList([]);\r\n      setBorders([]);\r\n      setFlag(\"\");\r\n      setName(\"\");\r\n  }\r\n\r\n  useEffect(() => {\r\n      resetStates();\r\n      countriesService.loadCountry(id, countryFields, countryDataHandler);\r\n  }, [id]);\r\n\r\n  return (\r\n    <>\r\n      {!name ? (\r\n          <Loading dependency={name} />\r\n      ) : (\r\n          <div className=\"country-info\">\r\n              <LinkButton to=\"/\" label=\"Back\" icon=\"fa fa-arrow-left\" />\r\n              <div className=\"l-flex-spaced country-info-wrapper\">\r\n                  <img src={flag} alt={name} className=\"country-info-wrapper-img\" />\r\n                  <div className=\"l-grid-2 country-info-wrapper-details\">\r\n                      <h2 className=\"country-info-wrapper-details-label\">{name}</h2>\r\n                      <ItemsList items={firstList} />\r\n                      <ItemsList items={secondList} />\r\n                      {borders && (\r\n                          <BordersList\r\n                              items={borders}\r\n                              label=\"Border Countries:\"\r\n                          />\r\n                      )}\r\n                  </div>\r\n              </div>\r\n          </div>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CountryInfo;\r\n","C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\components\\Loading\\Loading.tsx",[],"C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\components\\ItemsList\\ItemsList.tsx",[],"C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\components\\BorderList\\BorderList.tsx",[],"C:\\Users\\azarkovic\\Documents\\countries-api-react\\src\\components\\LinkButton\\LinkButton.tsx",[],{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"131","replacedBy":"135"},{"ruleId":"133","replacedBy":"136"},{"ruleId":"137","severity":1,"message":"138","line":21,"column":6,"nodeType":"139","endLine":21,"endColumn":16,"suggestions":"140"},{"ruleId":"137","severity":1,"message":"141","line":49,"column":6,"nodeType":"139","endLine":49,"endColumn":14,"suggestions":"142"},{"ruleId":"131","replacedBy":"143"},{"ruleId":"133","replacedBy":"144"},{"ruleId":"137","severity":1,"message":"145","line":16,"column":6,"nodeType":"139","endLine":16,"endColumn":8,"suggestions":"146"},{"ruleId":"137","severity":1,"message":"147","line":117,"column":6,"nodeType":"139","endLine":117,"endColumn":10,"suggestions":"148"},"no-native-reassign",["149"],"no-negated-in-lhs",["150"],["149"],["150"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'darkTheme' and 'lightTheme'. Either include them or remove the dependency array.","ArrayExpression",["151"],"React Hook useEffect has a missing dependency: 'filterCountries'. Either include it or remove the dependency array.",["152"],["149"],["150"],"React Hook useEffect has missing dependencies: 'countriesService' and 'fields'. Either include them or remove the dependency array.",["153"],"React Hook useEffect has missing dependencies: 'countriesService' and 'countryDataHandler'. Either include them or remove the dependency array.",["154"],"no-global-assign","no-unsafe-negation",{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},"Update the dependencies array to be: [darkMode, darkTheme, lightTheme]",{"range":"163","text":"164"},"Update the dependencies array to be: [filter, filterCountries]",{"range":"165","text":"166"},"Update the dependencies array to be: [countriesService, fields]",{"range":"167","text":"168"},"Update the dependencies array to be: [countriesService, countryDataHandler, id]",{"range":"169","text":"170"},[576,586],"[darkMode, darkTheme, lightTheme]",[1657,1665],"[filter, filterCountries]",[577,579],"[countriesService, fields]",[3422,3426],"[countriesService, countryDataHandler, id]"]